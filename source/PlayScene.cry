import Graphics2D;

class PlayScene : AbstractScene {
	field gameId;
	field playerId;
	field authToken;
	field lastEventId = 0;
	
	field cameraX = 0;
	field cameraY = 0;
	field playersById = {};
	field userIds = [];
	
	constructor(gameId, userId, authToken) : base() {
		this.gameId = gameId;
		this.playerId = userId;
		this.authToken = authToken;
	}
	
	function applyPollData(pollData) {
		if (pollData.get('state') == null) {
			this.applyIncrementalPollData(pollData);
		} else {
			this.applyAbsolutePollData(pollData);
		}
		
		this.lastEventId = pollData['event_id_max'];
	}
	
	function applyIncrementalPollData(pollData) {
		print("Apply incremental: " + pollData);
	}
	
	function applyAbsolutePollData(pollData) {
		state = pollData['state'];
		userUpdatesRaw = state['user_data'].trim();
		newPlayersById = {};
		if (userUpdatesRaw.length > 0) {
			for (update : userUpdatesRaw.split('|')) {
				parts = update.split(':');
				userId = Core.parseInt(parts[0]);
				userName = parts[1];
				userX = Core.parseInt(parts[2]);
				userY = Core.parseInt(parts[3]);
				player = this.playersById.get(userId) ?? new Player(this, userId, userName, userX, userY);
				if (!player.isYou) {
					player.x = userX;
					player.y = userY;
					player.isYou = player.id == this.playerId;
				}
				newPlayersById[userId] = player;
			}
		}
		this.playersById = newPlayersById;
		this.userIds = this.playersById.keys();
		this.userIds.sort();
	}
	
	function update(input) {
		
	}
	
	function render(rc) {
		Draw.fill(255, 255, 255);
		cameraOffsetX = -this.cameraX + SCREEN_WIDTH / 2;
		cameraOffsetY = -this.cameraY + SCREEN_HEIGHT / 2;
		for (userId : this.userIds) {
			player = this.playersById[userId];
			player.render(cameraOffsetX, cameraOffsetY);
		}
	}
}