import Math;
import Graphics2D;

class PlayScene : AbstractScene {
	field gameId;
	field playerId;
	field authToken;
	field lastEventId = 0;
	
	field cameraX = null;
	field cameraY = null;
	field playersById = {};
	field userIds = [];
	
	field buttons;
	field buttonKeys;
	
	
	constructor(gameId, userId, authToken) : base() {
		this.gameId = gameId;
		this.playerId = userId;
		this.authToken = authToken;
		
		cols = [SCREEN_WIDTH - 200, SCREEN_WIDTH - 130, SCREEN_WIDTH - 70];
		rows = [SCREEN_HEIGHT - 200, SCREEN_HEIGHT - 130, SCREEN_HEIGHT - 70];
		
		this.buttons = {
			'up': new UIImage(cols[1], rows[0], ImageLibrary.getAtScale('arrow_up.png', .5)),
			'down': new UIImage(cols[1], rows[2], ImageLibrary.getAtScale('arrow_down.png', .5)),
			'left': new UIImage(cols[0], rows[1], ImageLibrary.getAtScale('arrow_left.png', .5)),
			'right': new UIImage(cols[2], rows[1], ImageLibrary.getAtScale('arrow_right.png', .5)),
			'wave': new UIImage(cols[1], rows[1], ImageLibrary.getAtScale('button_wave.png', .5))
		};
		this.buttonKeys = this.buttons.keys();
		
		for (button : this.buttons.values()) {
			this.addElement(button);
		}
	}
	
	function applyPollData(pollData) {
		if (pollData == null) return;
		
		if (pollData.get('state') == null) {
			this.applyIncrementalPollData(pollData);
		} else {
			this.applyAbsolutePollData(pollData);
		}
		
		this.lastEventId = Math.max(this.lastEventId, pollData['event_id_max']);
	}
	
	function applyIncrementalPollData(pollData) {
		print("Apply incremental: " + pollData);
	}
	
	function applyAbsolutePollData(pollData) {
		state = pollData['state'];
		userUpdatesRaw = state['user_data'].trim();
		newPlayersById = {};
		if (userUpdatesRaw.length > 0) {
			for (update : userUpdatesRaw.split('|')) {
				parts = update.split(':');
				userId = Core.parseInt(parts[0]);
				userName = parts[1];
				userX = Core.parseInt(parts[2]);
				userY = Core.parseInt(parts[3]);
				player = this.playersById.get(userId) ?? new Player(this, userId, userName, userX, userY);
				if (!player.isYou) {
					player.x = userX;
					player.y = userY;
					player.isYou = player.id == this.playerId;
				}
				newPlayersById[userId] = player;
			}
		}
		this.playersById = newPlayersById;
		this.userIds = this.playersById.keys();
		this.userIds.sort();
	}
	
	function update(input) {
		you = this.playersById[this.playerId];
		
		if (input.pressed) {
			mx = input.mouseX;
			my = input.mouseY;
			for (buttonId : this.buttonKeys) {
				button = this.buttons[buttonId];
				if (button.inBounds(mx, my)) {
					this.buttonPushed(buttonId, input.clicked);
				}
			}
		}
		pushedKeys = input.pushedKeys;
		if (pushedKeys.get('left', false)) this.buttonPushed('left', false);
		else if (pushedKeys.get('right', false)) this.buttonPushed('right', false);
		if (pushedKeys.get('up', false)) this.buttonPushed('up', false);
		else if (pushedKeys.get('down', false)) this.buttonPushed('down', false);
		
		for (userId : this.userIds) {
			player = this.playersById[userId];
			player.update();
		}
	}
	
	function buttonPushed(id, clickedThisFrame) {
		player = this.playersById[this.playerId];
		switch (id) {
			case 'wave':
				if (clickedThisFrame) {
					this.doWave();
				}
				break;
			case 'left':
				player.dx = -10;
				break;
			case 'right':
				player.dx = 10;
				break;
			case 'up':
				player.dy = -10;
				break;
			case 'down':
				player.dy = 10;
				break;
		}
	}
	
	function doWave() {
		print("Do wave.");
	}
	
	function render(rc) {
		Draw.fill(255, 255, 255);
		player = this.playersById[this.playerId];
		targetX = player.x;
		targetY = player.y;
		if (this.cameraX == null) {
			this.cameraX = targetX;
			this.cameraY = targetY;
		} else {
			this.cameraX = (this.cameraX * 19 + targetX) / 20.0;
			this.cameraY = (this.cameraY * 19 + targetY) / 20.0;
		}
		
		cameraOffsetX = Math.floor(-this.cameraX + SCREEN_WIDTH / 2 + .5);
		cameraOffsetY = Math.floor(-this.cameraY + SCREEN_HEIGHT / 2 + .5);
		for (userId : this.userIds) {
			player = this.playersById[userId];
			player.render(cameraOffsetX, cameraOffsetY);
		}
	}
}