import Math;
import Graphics2D;
import Random;

class PlayScene : AbstractScene {
	field gameId;
	field playerId;
	field authToken;
	field lastEventId = 0;
	
	field cameraX = null;
	field cameraY = null;
	field playersById = {};
	field userIds = [];
	field wavesById = {};
	field waveIds = [];
	
	field buttons;
	field buttonKeys;
	field lastSyncTime = 0;
	field pollRequests = [];
	
	constructor(gameId, userId, authToken) : base() {
		this.gameId = gameId;
		this.playerId = userId;
		this.authToken = authToken;
		
		cols = [SCREEN_WIDTH - 200, SCREEN_WIDTH - 130, SCREEN_WIDTH - 70];
		rows = [SCREEN_HEIGHT - 200, SCREEN_HEIGHT - 130, SCREEN_HEIGHT - 70];
		
		this.buttons = {
			'up': new UIImage(cols[1], rows[0], ImageLibrary.getAtScale('arrow_up.png', .5)),
			'down': new UIImage(cols[1], rows[2], ImageLibrary.getAtScale('arrow_down.png', .5)),
			'left': new UIImage(cols[0], rows[1], ImageLibrary.getAtScale('arrow_left.png', .5)),
			'right': new UIImage(cols[2], rows[1], ImageLibrary.getAtScale('arrow_right.png', .5)),
			'wave': new UIImage(cols[1], rows[1], ImageLibrary.getAtScale('button_wave.png', .5))
		};
		this.buttonKeys = this.buttons.keys();
		
		for (button : this.buttons.values()) {
			this.addElement(button);
		}
	}
	
	function applyPollData(pollData) {
		if (pollData == null) return;
		if (pollData.length == 0) return; // sometimes PHP converts this to an empty list.
		
		this.applyAbsolutePollData(pollData);
		
		this.applyIncrementalPollData(pollData);
		
		this.lastEventId = Math.max(this.lastEventId, pollData['event_id_max']);
	}
	
	function applyIncrementalPollData(pollData) {
		minId = pollData.get('event_id_min');
		maxId = pollData.get('event_id_max');
		events = pollData.get('events');
		if (minId == null || maxId == null || events == null || minId == 0) return;
		
		for (eventId = minId; eventId <= maxId; ++eventId) {
			event = events['e' + eventId];
			switch (event['type'].trim()) {
				case 'MOVE':
					data = event['data'].split(':');
					userId = Core.parseInt(data[0]);
					user = this.playersById.get(userId);
					if (user != null && !user.isYou) {
						for (i = 1; i < data.length; i += 2) {
							x = Core.parseInt(data[i]);
							y = Core.parseInt(data[i + 1]);
							user.pointQueue.add([x, y]);
						}
					}
					break;
				
				case 'JOIN':
					data = event['data'].split(':');
					userId = Core.parseInt(data[0]);
					userName = data[1];
					userX = Core.parseInt(data[2]);
					userY = Core.parseInt(data[3]);
					if (this.playersById.get(userId) == null) {
						this.playersById[userId] = new Player(this, userId, userName, userX, userY);
						this.userIds = this.playersById.keys();
						this.userIds.sort();
					}
					break;
				
				case 'PART':
					userId = Core.parseInt(event['data']);
					if (this.playersById.get(userId) != null) {
						this.playersById.remove(userId);
						this.userIds = this.playersById.keys();
						this.userIds.sort();
					}
					break;
				
				case 'WAVE_INIT':
					waveData = event['data'].split(':');
					userId = Core.parseInt(waveData[0]);
					waveId = Core.parseInt(waveData[1]);
					ox = Core.parseInt(waveData[2]);
					oy = Core.parseInt(waveData[3]);
					ax = Core.parseInt(waveData[4]);
					ay = Core.parseInt(waveData[5]);
					bx = Core.parseInt(waveData[6]);
					by = Core.parseInt(waveData[7]);
					wave = new Wave(waveId, userId, ox, oy, ax, ay, bx, by);
					this.wavesById[waveId] = wave;
					this.waveIds.add(waveId);
					this.waveIds.sort();
					player = this.playersById.get(userId);
					if (player != null) {
						player.activeWaveId = waveId;
					}
					break;
				
				case 'WAVE_RECV':
				case 'WAVE_GIVE_UP':
					waveId = Core.parseInt(event['data'].split(':')[0]);
					if (this.wavesById.get(waveId) != null) {
						wave = this.wavesById.get(waveId);
						if (wave != null) {
							this.wavesById.remove(waveId);
						}
						player = this.playersById.get(wave.userId);
						if (player != null && player.activeWaveId == waveId) player.activeWaveId = null;
						this.waveIds = this.wavesById.keys();
						this.waveIds.sort();
					}
					break;
					
				default:
					if (event['type'] == 'PART') { // WTF? why is the switch statement failing?
						userId = Core.parseInt(event['data']);
						if (this.playersById.get(userId) != null) {
							this.playersById.remove(userId);
							this.userIds = this.playersById.keys();
							this.userIds.sort();
						}
					}
					throw new Core.Exception("Unknown server event type: " + event['type'] + ' --> ' + event['data']);
			}
		}
	}
	
	function applyAbsolutePollData(pollData) {
		state = pollData.get('state');
		if (state == null) return;
		
		// update users
		userUpdatesRaw = state['user_data'].trim();
		newPlayersById = {};
		if (userUpdatesRaw.length > 0) {
			for (update : userUpdatesRaw.split('|')) {
				parts = update.split(':');
				userId = Core.parseInt(parts[0]);
				userName = parts[1];
				userX = Core.parseInt(parts[2]);
				userY = Core.parseInt(parts[3]);
				player = this.playersById.get(userId) ?? new Player(this, userId, userName, userX, userY);
				if (!player.isYou) {
					player.x = userX;
					player.y = userY;
					player.isYou = player.id == this.playerId;
				}
				newPlayersById[userId] = player;
			}
		}
		this.playersById = newPlayersById;
		this.userIds = this.playersById.keys();
		this.userIds.sort();
		
		// udpate waves
		waveUpdatesRaw = state['wave_data'].trim();
		newWavesById = {};
		if (waveUpdatesRaw.length > 0) {
			for (update : waveUpdatesRaw.split('|')) {
				parts = update.split(':');
				userId = Core.parseInt(parts[0]);
				waveId = Core.parseInt(parts[1]);
				ax = Core.parseInt(parts[2]);
				ay = Core.parseInt(parts[3]);
				bx = Core.parseInt(parts[4]);
				by = Core.parseInt(parts[5]);
				cx = Core.parseInt(parts[6]);
				cy = Core.parseInt(parts[7]);
				player = this.playersById.get(userId);
				if (player != null) {
					player.activeWaveId = waveId;
				}
				newWavesById[waveId] = new Wave(waveId, userId, ax, ay, bx, by, cx, cy);
			}
		}
		this.wavesById = newWavesById;
		this.waveIds = this.wavesById.keys();
		this.waveIds.sort();
	}
	
	function update(input) {
		you = this.playersById[this.playerId];
		
		if (input.pressed) {
			mx = input.mouseX;
			my = input.mouseY;
			for (buttonId : this.buttonKeys) {
				button = this.buttons[buttonId];
				if (button.inBounds(mx, my)) {
					this.buttonPushed(buttonId, input.clicked);
				}
			}
		}
		
		if (input.spaceTapped) {
			this.doWave();
		}
		
		pushedKeys = input.pushedKeys;
		if (pushedKeys.get('left', false)) this.buttonPushed('left', false);
		else if (pushedKeys.get('right', false)) this.buttonPushed('right', false);
		if (pushedKeys.get('up', false)) this.buttonPushed('up', false);
		else if (pushedKeys.get('down', false)) this.buttonPushed('down', false);
		
		for (userId : this.userIds) {
			player = this.playersById[userId];
			player.update();
		}
		
		if (this.lastSyncTime < Core.currentTime() - 1 && this.pollRequests.length == 0) {
			this.pollRequests.add(new NetworkMessage({
				'action': 'POLL',
				'user_id': this.playerId,
				'token': this.authToken,
				'game_id': this.gameId,
				'event_id': this.lastEventId,
			}).send());
		}
		
		if (this.pollRequests.length > 0) {
			newPollRequests = [];
			for (pollRequest : this.pollRequests) {
				if (pollRequest.isDone()) {
					if (pollRequest.isError()) {
						// ignore?
					} else {
						syncResult = pollRequest.getResponse();
						switch (syncResult['err']) {
							case 'OK':
								this.applyPollData(syncResult['poll']);
								this.lastSyncTime = Core.currentTime();
								break;
							case 'INVALID':
								this.switchScene(new LoginScene("Invalid request sent"));
								return;
							case 'OLD':
								// ignore, I guess?
								return;
							case 'GAME_RESET':
								this.switchScene(new LoginScene("The game has restarted."));
								return;
							default:
								this.switchScene(new LoginScene("Unknown response: '" + syncResult['err'] + "'"));
								return;
						}
					}
				} else {
					newPollRequests.add(pollRequest);
				}
			}
			this.pollRequests = newPollRequests;
		}
	}
	
	function buttonPushed(id, clickedThisFrame) {
		player = this.playersById[this.playerId];
		switch (id) {
			case 'wave':
				if (clickedThisFrame) {
					this.doWave();
				}
				break;
			case 'left':
				player.dx = -10;
				player.lastDirection = 'left';
				if (player.activeWaveId != null) this.doWave();
				break;
			case 'right':
				player.dx = 10;
				player.lastDirection = 'right';
				if (player.activeWaveId != null) this.doWave();
				break;
			case 'up':
				player.dy = -10;
				player.lastDirection = 'up';
				if (player.activeWaveId != null) this.doWave();
				break;
			case 'down':
				player.dy = 10;
				player.lastDirection = 'down';
				if (player.activeWaveId != null) this.doWave();
				break;
		}
	}
	
	function getWaveCoords(player) {
		points = [Math.floor(player.x), Math.floor(player.y) - 15] * 3;
		distMajor = 250;
		distMinor = 80;
		switch (player.lastDirection) {
			case 'up':
				points[2] -= distMinor;
				points[3] -= distMajor;
				points[4] += distMinor;
				points[5] -= distMajor;
				break;
			case 'down':
				points[2] -= distMinor;
				points[3] += distMajor;
				points[4] += distMinor;
				points[5] += distMajor;
				break;
			case 'left':
				points[2] -= distMajor;
				points[3] -= distMinor;
				points[4] -= distMajor;
				points[5] += distMinor;
				break;
			case 'right':
				points[2] += distMajor;
				points[3] -= distMinor;
				points[4] += distMajor;
				points[5] += distMinor;
				break;
			default:
				return null;
		}
		return points;
	}
	
	function doWave() {
		player = this.playersById[this.playerId];
		if (player.activeWaveId == null) {
			coordinates = this.getWaveCoords(player);
			this.pollRequests.add(new NetworkMessage({
				'user_id': this.playerId,
				'token': this.authToken,
				'game_id': this.gameId,
				'event_id': this.lastEventId,
				'action': 'WAVE_INIT',
				'target': coordinates.join(','),
			}).send());
		} else {
			this.pollRequests.add(new NetworkMessage({
				'user_id': this.playerId,
				'token': this.authToken,
				'game_id': this.gameId,
				'event_id': this.lastEventId,
				'action': 'WAVE_GIVE_UP',
				'wave_id': player.activeWaveId,
			}).send());
			if (this.wavesById.get(player.activeWaveId) != null) {
				this.wavesById.remove(player.activeWaveId);
			}
			player.activeWaveId = null;
		}
	}
	
	function render(rc) {
		Draw.fill(255, 255, 255);
		player = this.playersById[this.playerId];
		targetX = player.x;
		targetY = player.y;
		if (this.cameraX == null) {
			this.cameraX = targetX;
			this.cameraY = targetY;
		} else {
			this.cameraX = (this.cameraX * 19 + targetX) / 20.0;
			this.cameraY = (this.cameraY * 19 + targetY) / 20.0;
		}
		
		cameraOffsetX = Math.floor(-this.cameraX + SCREEN_WIDTH / 2 + .5);
		cameraOffsetY = Math.floor(-this.cameraY + SCREEN_HEIGHT / 2 + .5);
		
		this.renderBackground(cameraOffsetX, cameraOffsetY);
		
		badData = false;
		for (waveId : this.waveIds) {
			wave = this.wavesById.get(waveId);
			if (wave == null) badData = true;
			else {
				wave.render(cameraOffsetX, cameraOffsetY, rc);
			}
		}
		if (badData) {
			this.waveIds = this.wavesById.keys();
			this.waveIds.sort();
		}
		
		for (userId : this.userIds) {
			player = this.playersById[userId];
			player.render(cameraOffsetX, cameraOffsetY, rc);
		}
	}
	
	field randNums = this.getRandNums();
	function getRandNums() {
		output = [];
		for (y = 0; y < 20; ++y) {
			col = [];
			for (x = 0; x < 20; ++x) {
				col.add(Random.randomInt(200, 250));
			}
			output.add(col);
		}
		return output;
	}
	
	function renderBackground(cxOffset, cyOffset) {
		colMin = Math.floor(this.cameraX - this.cameraX % 100 - SCREEN_WIDTH / 2);
		rowMin = Math.floor(this.cameraY - this.cameraY % 100 - SCREEN_HEIGHT / 2);
		colMax = colMin + SCREEN_WIDTH;
		rowMax = rowMin + SCREEN_HEIGHT;
		for (col = colMin; col <= colMax; col += 100) {
			for (row = rowMin; row <= rowMax; row += 100) {
				cn = col / 100;
				rn = row / 100;
				color = this.randNums[cn % 20][rn % 20];
				
				if (Math.abs(cn) < 15 && Math.abs(rn) < 15) {
					if (Math.abs(cn) < 10 && Math.abs(rn) < 7) {
						r = color;
						g = 255;
						b = color;
					} else {
						r = color;
						g = color;
						b = 255;
					}
				} else {
					r = color / 3;
					g = color / 4;
					b = color / 4;
				}
				
				Draw.rectangle(col + cxOffset, row + cyOffset, 100, 100, r, g, b, 255);
			}
		}
	}
}