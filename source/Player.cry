import Graphics2D;
import Math;

const PLAYER_VELOCITY = 4.0;

enum PlayerImageType {
	WALK1,
	WALK2,
	WAVE1,
	WAVE2,
}

class Player {
	field playScene;
	
	field id;
	field x;
	field y;
	field pointQueue = [];
	field lastDirection = 'down';
	field score = 0.0;
	
	field isYou = false;
	field name;
	field nameLabel;
	
	field coordsLastSentAt = 0;
	field movedThisFrame = false;
	
	field activeWaveId = null;
	
	field coordSendRequest = null;
	field waveRequest = null;
	
	field images;
	
	// this is used by the send queue for the current player to make a good guess for consolidating movement vectors.
	field angle = 0;
	
	// points to report to the server
	field pointSendQueue = [];
	
	// the angle that the last point was added at
	field pointSendQueueLastAngle;
	
	// movement request for current player
	field dx = 0;
	field dy = 0;
	
	constructor(playScene, id, name, x, y) {
		this.playScene = playScene;
		this.id = id;
		this.x = x + 0.0;
		this.y = y + 0.0;
		this.name = name;
		this.nameLabel = UIText.create(0, 0, name, 'black', FontSize.S);
		this.initImages();
	}
	
	function initImages() {
		code = 0;
		for (char : this.name) {
			code = code ^ Core.ord(char);
		}
		color = ['purple', 'green', 'blue', 'yellow'][code % 4];
		this.images = {
			PlayerImageType.WALK1: ImageLibrary.get('sprites/' + color + '/walk1.png'),
			PlayerImageType.WALK2: ImageLibrary.get('sprites/' + color + '/walk2.png'),
			PlayerImageType.WAVE1: ImageLibrary.get('sprites/' + color + '/wave1.png'),
			PlayerImageType.WAVE2: ImageLibrary.get('sprites/' + color + '/wave2.png'),
		};
	}
	
	function addPoint(pt) {
		this.pointQueue.add(pt);
	}
	
	function update() {
		
		this.movedThisFrame = false;
		if (this.isYou) {
			this.updateForLocalPlayer();
		} else {
			if (this.pointQueue.length > 0) {
				pt = this.pointQueue[0];
				targetX = pt[0];
				targetY = pt[1];
				dx = targetX - this.x;
				dy = targetY - this.y;
				distance = (dx ** 2 + dy ** 2) ** .5;
				if (distance < PLAYER_VELOCITY) {
					this.x = targetX;
					this.y = targetY;
					this.pointQueue.remove(0);
				} else {
					this.x += PLAYER_VELOCITY * dx / distance;
					this.y += PLAYER_VELOCITY * dy / distance;
				}
				this.movedThisFrame = true;
			}
		}
	}
	
	function updateForLocalPlayer() {
		now = Core.currentTime();
		if (this.dx != 0 || this.dy != 0) {
			distance = (this.dx ** 2 + this.dy ** 2) ** .5;
			dx = PLAYER_VELOCITY * this.dx / distance;
			dy = PLAYER_VELOCITY * this.dy / distance;
			this.dx = 0;
			this.dy = 0;
			theta = Math.floor(30 * Math.arctan(dy, dx) / (2 * Math.PI)); // if you're within 1/30th circle sector of the original movement, then aggregate the movement requests
			this.x += dx;
			this.y += dy;
			this.movedThisFrame = true;
			xInt = Math.floor(this.x);
			yInt = Math.floor(this.y);
			
			if (this.pointSendQueue.length == 0) {
				// if there was nothing to send until now, go ahead and reset the delay such that you don't
				// send a request to move 1 frame worth of pixels and then 2 seconds later you send 2 seconds 
				// worth of movement.
				this.coordsLastSentAt = now;
			}
			
			if (this.pointSendQueue.length > 0 && this.pointSendQueueLastAngle == theta) {
				lastPt = this.pointSendQueue[-1];
				lastPt[0] = xInt;
				lastPt[1] = yInt;
			} else {
				this.pointSendQueueLastAngle = theta;
				this.pointSendQueue.add([xInt, yInt]);
			}
		}
		
		if (this.pointSendQueue.length > 0 && now > this.coordsLastSentAt + 2 && this.coordSendRequest == null) {
			this.sendCoordsToNetwork();
		}
		
		if (this.coordSendRequest != null && this.coordSendRequest.isDone()) {
			if (this.coordSendRequest.isError()) {
				// ignore, I guess?
			} else {
				response = this.coordSendRequest.getResponse();
				switch (response['err']) {
					case 'OK':
						this.playScene.applyPollData(response.get('poll'));
						break;
					case 'GAME_RESET':
						this.playScene.switchScene(new LoginScene("The game was reset"));
						return;
					case 'INVALID':
						this.playScene.switchScene(new LoginScene("Invalid request sent"));
						return;
					case 'OLD':
						// ignore, I guess?
						return;
					default:
						this.playScene.switchScene(new LoginScene("Server sent unknown response: '" + response['err'] + "'"));
						return;
				}
			}
			this.coordSendRequest = null;
		}
		
		if (this.waveRequest != null && this.waveRequest.isDone()) {
			if (this.waveRequest.isError()) {
				// ignore?
			} else {
				response = this.waveRequest.getResponse();
				// actually, now, I'm just going to ignore the output and let the applyPollData deal with it.
				// Not enough time to do this "right".
				
				this.waveRequest = null;
				switch (response['err']) {
					case 'OK':
						this.playScene.applyPollData(response.get('poll'));
						break;
					case 'GAME_RESET':
						this.playScene.switchScene(new LoginScene("The game was reset"));
						return;
					case 'INVALID':
						this.playScene.switchScene(new LoginScene("Invalid request sent"));
						return;
					case 'OLD':
						// ignore, I guess?
						return;
					default:
						this.playScene.switchScene(new LoginScene("Server sent unknown response: '" + response['err'] + "'"));
						return;
				}
			}
		}
	}
	
	function sendCoordsToNetwork() {
		pts = [];
		for (pt : this.pointSendQueue) {
			pts.add(pt[0] + ',' + pt[1]);
		}
		this.pointSendQueue.clear();
		
		this.coordSendRequest = new NetworkMessage({
			'action': 'MOVE',
			'user_id': this.playScene.playerId,
			'token': this.playScene.authToken,
			'event_id': this.playScene.lastEventId,
			'game_id': this.playScene.gameId,
			'pts': pts.join('|'),
		}).send();
		this.coordsLastSentAt = Core.currentTime();
	}
	
	function render(cameraOffsetX, cameraOffsetY, rc) {
		px = Math.floor(this.x) + cameraOffsetX;
		py = Math.floor(this.y) + cameraOffsetY;
		if (px > -50 && px < SCREEN_WIDTH + 50 && py > -50 && py < SCREEN_HEIGHT + 50) {
			if (this.activeWaveId != null) {
				img = this.images[(rc / 10) % 2 == 0 ? PlayerImageType.WAVE1 : PlayerImageType.WAVE2];
			} else {
				if (this.movedThisFrame && (rc / 18) % 2 == 0) {
					img = this.images[PlayerImageType.WALK2];
				} else {
					img = this.images[PlayerImageType.WALK1];
				}
			}
			img.draw(px - img.width / 2, py - img.height);
			nl = this.nameLabel;
			nl.x = px - nl.width / 2;
			nl.y = py + 15;
			nl.render(0);
		}
	}
}